---
// src/pages/subjects/[partId]/[subjectId]/[summarySlug].astro
import Layout from "../../../../layouts/Layout.astro";
import allData from "../../../../data/subjectsData.json";
import type { GetStaticPaths } from "astro";

// استيراد المكونات
import TimelineView from "../../../../components/TimelineView.jsx";
import VocabularyCardsApp from "../../../../components/englishPage/wordsEnglishComponent";
import InteractiveGrammarApp from "../../../../components/englishPage/interactiveGrammarApp";
import InteractiveGrammarAppara from "../../../../components/arabicPage/interactiveGrammarAppAra";

export const getStaticPaths: GetStaticPaths = () => {
  const paths: {
    params: { partId: string; subjectId: string; summarySlug: string };
  }[] = [];
  
  allData.subjects.forEach((subject) => {
    if (subject.parts) {
      const parts: { [key: string]: { summaries: any[] } } = subject.parts;
      Object.keys(parts).forEach((partId) => {
        if (parts[partId]?.summaries) {
          parts[partId].summaries.forEach((summary) => {
            paths.push({
              params: {
                partId: partId,
                subjectId: subject.id,
                summarySlug: summary.slug,
              },
            });
          });
        }
      });
    }
  });
  
  return paths;
};

const { subjectId, partId, summarySlug } = Astro.params;
const subjectData = allData.subjects.find((s) => s.id === subjectId);
const parts = subjectData?.parts as
  | { [key: string]: { summaries: any[] } }
  | undefined;
const summaryMetadata =
  parts && partId && parts[partId]?.summaries
    ? parts[partId].summaries.find((s: any) => s.slug === summarySlug)
    : undefined;

// جمع جميع الملخصات المتاحة لهذا الجزء
const allSummaries = parts && partId ? parts[partId].summaries : [];

let items = [];
if (subjectId && summarySlug) {
  try {
    const contentModule = await import(
      `../../../../content/${subjectId}/${summarySlug}.json`
    );
    items = contentModule.default?.subjectData || contentModule.subjectData || [];
  } catch (error) {
    console.error(
      `Could not load content for ${subjectId}/${summarySlug}.json.`,
      error,
    );
  }
}

if (!subjectData || !summaryMetadata) {
  return Astro.redirect("/404");
}

const { title: summaryTitle, book } = summaryMetadata;

// دالة تحويل خاصة للغة الإنجليزية
const englishDataMapper = (item: any) => ({
  id: item.id,
  word: item.word,
  translation: item.translation || "",
  example: item.example,
  imageUrl: item.imageUrl,
  category: item.category
});

// دالة تحويل عامة لباقي المواد
const defaultDataMapper = (item: any) => ({
  id: item.id || Math.random().toString(36).substr(2, 9),
  word: item.title || item.name,
  translation: item.translation || "",
  example: item.description || item.definition,
  imageUrl: item.imageUrl || item.image,
  category: item.category || item.type || "عام"
});

// دالة للحصول على اسم نوع المكون
function getComponentTypeName(type: string) {
  const typeNames: Record<string, string> = {
    'timeline': 'الخط الزمني',
    'grammar': 'قواعد تفاعلية (انجليزي)',
    'cards': 'بطاقات تعليمية',
    'arabic-grammar': 'قواعد تفاعلية (عربي)'
  };
  return typeNames[type] || type;
}

// إنشاء قائمة الملخصات كـ HTML
const summariesList = allSummaries.map(summary => {
  const isCurrent = summary.slug === summarySlug;
  return `
    <a
      href="/subjects/${partId}/${subjectId}/${summary.slug}"
      class="summary-btn w-full text-right p-3 rounded-lg transition-colors
        ${isCurrent ? 'bg-sky-600 text-white selected-summary' : 'bg-white hover:bg-sky-100 text-sky-700'}"
      data-slug="${summary.slug}"
    >
      <div class="font-medium">${summary.title}</div>
      <div class="text-sm opacity-80">${summary.book}</div>
    </a>
  `;
}).join('');


---

<Layout title={`${summaryTitle} - ${subjectData.title}`}>
  <div class="w-full min-h-screen">
    <div class="text-center py-8 px-4 bg-white">
      <div class="container mx-auto">
        <h1 class="text-3xl md:text-4xl font-bold text-gray-800">{subjectData.title}</h1>
        <h2 class="text-2xl md:text-3xl font-semibold text-sky-600 mt-2">{summaryTitle}</h2>
        <p class="text-gray-600 mt-3 max-w-3xl mx-auto">{summaryMetadata.description}</p>
        <div class="mt-4 inline-block bg-gray-100 px-4 py-2 rounded-full text-sm font-medium text-gray-700">
          نوع المحتوى: {getComponentTypeName(summaryMetadata.componentType)}
        </div>
      </div>
    </div>


    <div class="interactive-content-wrapper">
      {summaryMetadata.componentType === 'timeline' && (
      <TimelineView client:visible summaryTitle={summaryTitle} book={book} items={items} />
    )}
    {summaryMetadata.componentType === 'grammar' && (
      <InteractiveGrammarApp client:visible summaryTitle={summaryTitle} items={items} />
    )}
    {/* --- الإضافة تبدأ هنا --- */}
    {summaryMetadata.componentType === 'arabic-grammar' && (
      <InteractiveGrammarAppara client:visible title={summaryTitle} data={{ subjectData: items }} />
    )}
    {/* --- الإضافة تنتهي هنا --- */}
    {(summaryMetadata.componentType === 'cards' || !['timeline', 'grammar', 'arabic-grammar'].includes(summaryMetadata.componentType)) && (
      <VocabularyCardsApp
        client:visible
        subjectData={items}
        appTitle={summaryTitle}
        dataMapper={subjectId === "english-language" ? englishDataMapper : defaultDataMapper}
      />
    )}
    </div>

    <div class="text-center my-12">
      <a
        href={`/subjects/${partId}/${subjectId}`}
        class="inline-flex items-center bg-gray-600 text-white font-bold py-3 px-6 rounded-lg shadow-md hover:bg-gray-700 transition-colors"
      >
        <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        العودة إلى قائمة الملخصات
      </a>
    </div>
  </div>

  <style>
    .summary-btn {
      transition: all 0.2s ease-in-out;
      border: 1px solid #e5e7eb;
    }
    .summary-btn.selected-summary {
      box-shadow: 0 4px 14px 0 rgba(0, 118, 255, 0.39);
      transform: translateY(-3px);
      border-color: transparent;
    }
    .summary-btn:hover:not(.selected-summary) {
      transform: translateY(-3px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
  </style>
</Layout>